(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-61b93999"],{"1bc8":function(n,t){n.exports="## vue内嵌iframe并跨域通信\n\n*time：2019-6-22 author：sky*\n\n#### 近期做新老boss跳转页面,老boss使用sessionStorage存储数据,总结一下遇到的问题\n\nsessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标 签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。\n\n#### 同源的判断规则：\n\n``` html\n    http://www.test.com\n    https://www.test.com （不同源，因为协议不同）\n    http://my.test.com（不同源，因为主机名不同）\n    http://www.test.com:8080（不同源，因为端口不同）\n```\n\n#### 在此项目原先只用document.cookie 没成功，使用了ifram跨域通信去解决，使用的技术是window.postMessage\n\n参考文档： https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage\n\n>1、先在vue引入iframe\n\n``` javascript\n   <template>\n        <div class=\"act-form\">\n        <iframe :src=\"src\"></iframe>\n        </div>\n    </template>\n    <script>\n    export default {\n    data () {\n        return {\n        src: '你的src'\n        }\n    }\n    }\n    <\/script>\n```  \n\n>2、操作iframe获取其对象 \n``` javascript\nmounted () {\n    // 这里就拿到了iframe的对象\n    this.$refs.iframe\n    // 这里就拿到了iframe的window对象\n    this.$refs.iframe.contentWindow\n  }\n```\n    输出的结果如下：\n<img src='https://shiyongjason.github.io/img/iframe1.png'>\n\n>3、vue里面嵌入iframe开始向其传递数据\n------\n``` css\n**这里用到了postMessage   写法 otherWindow.postMessage(message, targetOrigin, [transfer])**\n```\n    在这里简单说明下参数含义\n\n    [otherWindow] \n>其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。\n\n    [message]\n>将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化\n\n    [targetOrigin]  \n>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串*（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。\n------\n``` javascript\n    methods: {\n        sendMessage (userData) {\n            // 外部vue向iframe内部传数据\n            this.iframeWin.postMessage({\n               // cmd: 'getFormJson',\n                params: userData\n            }, '*')\n        }\n    }\n```\n\n这里通过点击事件触发，向iframe发送信息，iframe内部通过如下去处理这条数据，在接受数据的页面监听 这个message在function写上业务逻辑代码\n\n``` javascript\n // 接受父页面发来的信息\n        window.addEventListener(\"message\", function(event){\n\t\tconst data = event.data.params\n\t\tsessionStorage.setItem(\"user_data\",JSON.stringify(data.data));\n\t\tsessionStorage.setItem(\"listAuth_data\",JSON.stringify(data.data.listAuth));\n        });\n```\n\n    如下图：storage 里面出现2个域，可见可以进行对他们的数据操作\n\n<img src='https://shiyongjason.github.io/img/iframe2.png'>\n\n    此时已经完全解决这些跨域的参数通信，注意的就是  *  有指定的域名最好指定 安全为上！\n\n\n<img src='http://n.sinaimg.cn/news/1_img/upload/cf3881ab/155/w1000h755/20190618/ef77-hyrtarv8624250.jpg' width='460px' style=\"display:block;margin:0 auto\">    "},3648:function(n,t,e){},"8af7":function(n,t,e){"use strict";e.r(t);var s=function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",[e("vue-markdown",[n._v(n._s(n.msg))])],1)},a=[],i=e("9ce6"),o=e.n(i),r=e("1bc8"),m=e.n(r),c=e("c197"),g=e.n(c),d={name:"specification",components:{VueMarkdown:o.a},data:function(){return{msg:m.a}},mounted:function(){g.a.highlightAll()}},f=d,p=(e("a315"),e("2877")),u=Object(p["a"])(f,s,a,!1,null,null,null);u.options.__file="index.vue";t["default"]=u.exports},a315:function(n,t,e){"use strict";var s=e("3648"),a=e.n(s);a.a}}]);
//# sourceMappingURL=chunk-61b93999.a67909a8.js.map